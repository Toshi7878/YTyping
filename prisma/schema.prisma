generator client {
  provider = "prisma-client-js"
  engineType = "library" // または "binary"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model Result {
  id             Int @id @default(autoincrement())
  mapId          Int
  userId         Int
  score          Int @default(0)
  defaultSpeed   Float @default(1)
  kpm            Int @default(0)
  rkpm           Int @default(0)
  romaKpm        Int @default(0)
  romaType       Int @default(0)
  kanaType       Int @default(0)
  flickType      Int @default(0)
  miss           Int @default(0)
  lost           Int @default(0)
  maxCombo       Int @default(0)
  clearRate      Float @default(0)
  rank           Int @default(1)
  updatedAt      DateTime @default(now()) @updatedAt
  clapCount      Int @default(0)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  map            Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  clap           Clap[]

  @@unique([userId, mapId]) // 複合ユニーク制約を追加

}

model UserTypingData {
    id                 Int    @id @default(autoincrement())
    userId             Int    @unique
    totalTypingTime    Float  @default(0)
    kanaTypeTotalCount Int    @default(0)
    romaTypeTotalCount Int    @default(0)
    totalPlayCount     Int    @default(0)
    maxCombo           Int    @default(0)
    clapCount          Int    @default(0)
    createdAt          DateTime @default(now())
    user           User   @relation(fields: [userId],   references: [id], onDelete: Cascade)

}

model TypingOption {
    id             Int @id @default(autoincrement())
    userId         Int @unique
    timeOffset     Float @default(0)
    typeSound      Boolean @default(false)
    missSound      Boolean @default(false)
    lineClearSound Boolean @default(false)
    nextDisplay    String @default("lyrics")
    timeOffsetKey  String @default("ctrl-left-right")
    toggleInputModeKey String @default("alt-kana")
    user           User   @relation(fields: [userId],   references: [id], onDelete: Cascade)
}


model Clap {
    id             Int @id @default(autoincrement())
    userId         Int
    resultId       Int
    isClaped       Boolean
    createdAt      DateTime @default(now())
    user           User   @relation(fields: [userId],   references: [id], onDelete: Cascade)
    result         Result @relation(fields: [resultId], references: [id], onDelete: Cascade)
    @@unique([userId, resultId]) // 複合ユニーク制約を追加
}

model MapLike {
    id             Int @id @default(autoincrement())
    userId         Int
    mapId          Int
    isLiked        Boolean
    createdAt      DateTime @default(now())
    user           User   @relation(fields: [userId],   references: [id], onDelete: Cascade)
    map            Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)
    @@unique([userId, mapId]) // 複合ユニーク制約を追加
}


model Map {
  id               Int @id @default(autoincrement())
  videoId          String
  title            String
  artistName       String? @default("")
  musicSource      String? @default("")
  creatorComment   String
  tags             String[] //分ける
  creatorId        Int
  previewTime      String @default("0")
  romaKpmMedian    Int @default(0)
  romaKpmMax       Int @default(0)
  kanaKpmMedian    Int @default(0)
  kanaKpmMax       Int @default(0)
  totalTime        Float @default(0)
  romaTotalNotes   Int @default(0)
  kanaTotalNotes   Int @default(0)
  playCount        Int @default(0)
  likeCount        Int @default(0)
  rankingCount     Int @default(0)
  thumbnailQuality String @default("mqdefault")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  mapDataUpdatedAt DateTime @default(now()) @updatedAt
  user             User @relation(fields: [creatorId], references: [id])
  result           Result[]
  mapLike          MapLike[]
}


model User {
  id            Int             @id @default(autoincrement())
  name          String?         @unique
  email_hash    String          @unique
  image         String?
  role          String          @default("user")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  maps          Map[]
  result        Result[]
  clap          Clap[]
  mapLike       MapLike[]
  typingOption  TypingOption[]
  userTypingData UserTypingData[]
}