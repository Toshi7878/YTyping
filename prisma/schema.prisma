generator client {
  provider        = "prisma-client-js"
  engineType      = "library" // または "binary"
  previewFeatures = ["typedSql"]
  relationMode    = "prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum thumbnail_quality {
  mqdefault
  maxresdefault
}

enum category {
  CSS
  SPEED_SHIFT
}

model maps {
  id                Int               @id @default(autoincrement())
  video_id          String            @default("")
  title             String            @default("")
  artist_name       String            @default("")
  music_source      String            @default("")
  creator_comment   String            @default("")
  tags              String[]          @default([])
  creator_id        Int
  preview_time      String            @default("0")
  play_count        Int               @default(0)
  like_count        Int               @default(0)
  ranking_count     Int               @default(0)
  category          category[]        @default([])
  thumbnail_quality thumbnail_quality @default(mqdefault)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  creator           users             @relation(fields: [creator_id], references: [id])
  results           results[]
  map_likes         map_likes[]
  notifications     notifications[]
  difficulty        map_difficulties?
}

model map_difficulties {
  map_id              Int   @id
  roma_kpm_median     Int   @default(0)
  roma_kpm_max        Int   @default(0)
  kana_kpm_median     Int   @default(0)
  kana_kpm_max        Int   @default(0)
  total_time          Float @default(0)
  roma_total_notes    Int   @default(0)
  kana_total_notes    Int   @default(0)
  english_total_notes Int   @default(0)
  symbol_total_notes  Int   @default(0)
  int_total_notes     Int   @default(0)
  map                 maps  @relation(fields: [map_id], references: [id], onDelete: Cascade)
}

model map_likes {
  user_id    Int
  map_id     Int
  is_liked   Boolean
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  map        maps     @relation(fields: [map_id], references: [id], onDelete: Cascade)

  @@unique([user_id, map_id])
}

model results {
  id                     Int              @id @default(autoincrement())
  map_id                 Int
  user_id                Int
  updated_at             DateTime         @default(now())
  clap_count             Int              @default(0)
  rank                   Int              @default(1)
  user                   users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  map                    maps             @relation(fields: [map_id], references: [id], onDelete: Cascade)
  status                 result_statuses?
  claps                  result_claps[]
  notificationsAsVisitor notifications[]  @relation("VisitorResult")
  notificationsAsVisited notifications[]  @relation("VisitedResult")

  @@unique([user_id, map_id])
}

model result_statuses {
  result_id     Int     @id
  score         Int     @default(0)
  default_speed Float   @default(1)
  kpm           Int     @default(0)
  rkpm          Int     @default(0)
  roma_kpm      Int     @default(0)
  roma_type     Int     @default(0)
  kana_type     Int     @default(0)
  flick_type    Int     @default(0)
  english_type  Int     @default(0)
  space_type    Int     @default(0)
  symbol_type   Int     @default(0)
  num_type      Int     @default(0)
  miss          Int     @default(0)
  lost          Int     @default(0)
  max_combo     Int     @default(0)
  clear_rate    Float   @default(0)
  result        results @relation(fields: [result_id], references: [id], onDelete: Cascade)
}

model result_claps {
  user_id    Int
  result_id  Int
  is_claped  Boolean
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  result     results  @relation(fields: [result_id], references: [id], onDelete: Cascade)

  @@unique([user_id, result_id])
}

enum action {
  LIKE
  OVER_TAKE
}

model notifications {
  id            Int      @id @default(autoincrement())
  visitor_id    Int
  visited_id    Int
  map_id        Int
  action        action   @default(OVER_TAKE)
  old_rank      Int?
  checked       Boolean  @default(false)
  created_at    DateTime @unique @default(now())
  visitor       users    @relation("Visitor", fields: [visitor_id], references: [id], onDelete: Cascade)
  visitorResult results  @relation("VisitorResult", fields: [visitor_id, map_id], references: [user_id, map_id], onDelete: Cascade)
  visitedResult results  @relation("VisitedResult", fields: [visited_id, map_id], references: [user_id, map_id], onDelete: Cascade)
  map           maps     @relation(fields: [map_id], references: [id], onDelete: Cascade)

  @@unique([visitor_id, visited_id, map_id, action])
}

enum role {
  USER
  ADMIN
}

model users {
  id                     Int                  @id @default(autoincrement())
  name                   String?              @unique
  email_hash             String               @unique
  role                   role                 @default(USER)
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt
  maps                   maps[]
  results                results[]
  resultClaps            result_claps[]
  mapLikes               map_likes[]
  notificationsAsVisitor notifications[]      @relation("Visitor")
  typingOption           user_typing_options?
  typingStats            user_stats?
  user_option            user_options?
}

enum custom_user_active_state {
  ONLINE
  ASK_ME
  HIDE_ONLINE
}

model user_options {
  user_id                  Int                      @id
  map_like_notify          Boolean                  @default(true)
  over_take_notify         Int                      @default(5)
  custom_user_active_state custom_user_active_state @default(ONLINE)
  user                     users                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum next_display {
  LYRICS
  WORD
}

enum line_completed_display {
  HIGH_LIGHT
  NEXT_WORD
}

enum time_offset_key {
  CTRL_LEFT_RIGHT
  CTRL_ALT_LEFT_RIGHT
  NONE
}

enum toggle_input_mode_key {
  ALT_KANA
  TAB
  NONE
}

model user_typing_options {
  user_id                Int                    @id
  time_offset            Float                  @default(0)
  kana_word_scroll       Int                    @default(6)
  roma_word_scroll       Int                    @default(9)
  type_sound             Boolean                @default(false)
  miss_sound             Boolean                @default(false)
  line_clear_sound       Boolean                @default(false)
  next_display           next_display           @default(LYRICS)
  line_completed_display line_completed_display @default(NEXT_WORD)
  time_offset_key        time_offset_key        @default(CTRL_LEFT_RIGHT)
  toggle_input_mode_key  toggle_input_mode_key  @default(ALT_KANA)
  user                   users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_stats {
  user_id                  Int      @id
  total_ranking_count      Int      @default(0)
  total_typing_time        Float    @default(0)
  roma_type_total_count    Int      @default(0)
  kana_type_total_count    Int      @default(0)
  flick_type_total_count   Int      @default(0)
  english_type_total_count Int      @default(0)
  space_type_total_count   Int      @default(0)
  symbol_type_total_count  Int      @default(0)
  num_type_total_count     Int      @default(0)
  total_play_count         Int      @default(0)
  max_combo                Int      @default(0)
  receive_applaused_count  Int      @default(0)
  created_at               DateTime @default(now())
  user                     users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
