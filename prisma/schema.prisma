generator client {
  provider = "prisma-client-js"
  engineType = "library" // または "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Result {
  id             Int @id @default(autoincrement())
  mapId          Int
  userId         Int
  score          Int @default(0)
  lineResult     Json
  status         Json
  updatedAt      DateTime @default(now()) @updatedAt
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  map            Map  @relation(fields: [mapId], references: [id], onDelete: Cascade) // 追加されたリレーション
}


model Map {
  id               Int @id @default(autoincrement())
  videoId          String
  title            String
  creatorComment   String
  tags             String[] //分ける
  creatorId        Int
  mapData          Json
  previewTime      String @default("0")
  romaKpmMedian    Int @default(0)
  romaKpmMax       Int @default(0)
  kanaKpmMedian    Int @default(0)
  kanaKpmMax       Int @default(0)
  totalTime        Float @default(0)
  romaTotalNotes   Int @default(0)
  kanaTotalNotes   Int @default(0)
  playCount        Int @default(0)
  likeCount        Int @default(0)
  rankingCount     Int @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  mapDataUpdatedAt DateTime @default(now()) @updatedAt
  user             User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  result           Result[]
}


model User {
  id            Int             @id @default(autoincrement())
  name          String?         @unique
  email_hash    String          @unique
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  maps          Map[]
  result        Result[]
}